// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ======================
// ENUMS
// ======================

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum AppointmentType {
  IN_PERSON
  ONLINE
}

enum ExperienceType {
  EDUCATION
  JOB
  CERTIFICATION
  OTHER
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// ======================
// MODELS
// ======================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Will be hashed
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(PATIENT)
  isActive  Boolean  @default(true)
  emailVerified Boolean @default(false)
  
  // Relations
  patient   Patient?
  doctor    Doctor?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Patient {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  email     String   @unique
  phone     String?
  birthdate DateTime?
  gender    String?

  appointments Appointment[]
  opinions     Opinion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model Doctor {
  id         String  @id @default(cuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  surname    String
  email      String? @unique
  phone      String?
  picaddress String?

  // Settings fields
  emailNotifications       Boolean @default(true)
  pushNotifications        Boolean @default(false)
  isPublic                Boolean @default(true)
  allowOnlineConsultations Boolean @default(false)
  autoBookingEnabled       Boolean @default(false)
  remindersEnabled         Boolean @default(true)
  consultationPrice        Int?    @default(50000)

  // many-to-many
  specialities DoctorSpeciality[]

  experiences  Experience[]
  pricings     Pricing[]
  clinics      DoctorClinic[]
  schedules    Schedule[]
  appointments Appointment[]
  opinions     Opinion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model Speciality {
  id          String @id @default(cuid())
  name        String @unique
  description String?

  // many-to-many
  doctors DoctorSpeciality[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model DoctorSpeciality {
  doctorId     String
  specialityId String

  doctor     Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  speciality Speciality @relation(fields: [specialityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([doctorId, specialityId])
}

model Experience {
  id             String         @id @default(cuid())
  doctorId       String
  doctor         Doctor         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  experienceType ExperienceType @default(OTHER)
  title          String
  institution    String?
  startDate      DateTime?
  endDate        DateTime?
  description    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model Clinic {
  id           String  @id @default(cuid())
  name         String
  address      String?
  country      String?
  city         String?
  neighborhood String?
  latitude     Float?
  longitude    Float?
  isVirtual    Boolean @default(false)

  doctorLinks  DoctorClinic[]
  schedules    Schedule[]
  pricing      Pricing[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model DoctorClinic {
  doctorId String
  clinicId String
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([doctorId, clinicId])
}

model Pricing {
  id              String  @id @default(cuid())
  doctorId        String
  clinicId        String
  doctor          Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic          Clinic  @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  title           String
  price           Decimal @db.Money
  currency        String  @default("USD")
  durationMinutes Int     @default(30)
  description     String?
  isActive        Boolean @default(true)

  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model Schedule {
  id        String    @id @default(cuid())
  doctorId  String
  clinicId  String
  doctor    Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic    Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  dayOfWeek DayOfWeek
  startTime String // Format: "09:00"
  endTime   String // Format: "17:00"
  isActive  Boolean   @default(true)

  timeSlots TimeSlot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@unique([doctorId, clinicId, dayOfWeek])
}

model TimeSlot {
  id         String   @id @default(cuid())
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  startTime  String // Format: "09:00"
  endTime    String // Format: "09:30"
  isBooked   Boolean  @default(false)
  isBlocked  Boolean  @default(false) // For doctor-blocked slots

  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@unique([scheduleId, startTime])
}

model Appointment {
  id              String            @id @default(cuid())
  doctorId        String
  patientId       String
  clinicId        String
  pricingId       String?
  timeSlotId      String?           @unique
  doctor          Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient         Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  clinic          Clinic            @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  pricing         Pricing?          @relation(fields: [pricingId], references: [id], onDelete: SetNull)
  timeSlot        TimeSlot?
  datetime        DateTime
  durationMinutes Int               @default(30)
  type            AppointmentType   @default(IN_PERSON)
  status          AppointmentStatus @default(PENDING)
  notes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}

model Opinion {
  id          String  @id @default(cuid())
  doctorId    String
  patientId   String
  doctor      Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  rating      Int     @db.SmallInt
  title       String?
  description String?
  anonymized  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}